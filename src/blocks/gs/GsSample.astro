<div class="canvas" id="js-gs-canvas"></div>

<script>
  import * as GaussianSplats3D from '@mkkellogg/gaussian-splats-3d';
  import * as THREE from 'three';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

  const rootElement = document.getElementById('js-gs-canvas');
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.set(-5, -0.5, -3);
  const controls = new OrbitControls(camera, rootElement);
  controls.enableDamping = true;

  const renderer = new THREE.WebGLRenderer({ alpha: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setAnimationLoop(animate);

  const geometry = new THREE.BoxGeometry(0.25, 0.25, 0.25);
  const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
  const cube = new THREE.Mesh(geometry, material);
  cube.position.y = 2;
  scene.add(cube);

  function animate() {
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;
    controls.update();
    renderer.render(scene, camera);
  }

  const onResize = () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
  };
  onResize();
  window.addEventListener('resize', onResize);

  const viewer = new GaussianSplats3D.Viewer({
    rootElement: rootElement, // 指定した場所に生成
    threeScene: scene,
    camera: camera,
    useBuiltInControls: false, // OrbitControlsを使うため
    sharedMemoryForWorkers: false, // 共有メモリをOFFにしてCORSエラーを回避
    initialCameraPosition: [-5, -0.5, -4],
  });
  viewer
    .addSplatScene('/assets/gs/brompton.ply', {
      scale: [1, -1, -1],
    })
    .then(() => {
      viewer.start();
    });
</script>

<style>
  .canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
</style>
